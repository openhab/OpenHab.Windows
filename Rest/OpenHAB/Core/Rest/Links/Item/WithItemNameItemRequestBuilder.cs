// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using OpenHAB.Core.Rest.Links.Item.Item;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace OpenHAB.Core.Rest.Links.Item {
    /// <summary>
    /// Builds and executes requests for operations under \links\{itemName}
    /// </summary>
    public class WithItemNameItemRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the openHAB.Core.Rest.links.item.item collection</summary>
        /// <param name="position">channel UID</param>
        /// <returns>A <see cref="WithChannelUItemRequestBuilder"/></returns>
        public WithChannelUItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("channelUID", position);
            return new WithChannelUItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new <see cref="WithItemNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithItemNameItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/links/{itemName}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithItemNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithItemNameItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/links/{itemName}", rawUrl) {
        }
    }
}
