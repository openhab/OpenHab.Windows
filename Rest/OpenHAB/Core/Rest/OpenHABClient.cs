// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using OpenHAB.Core.Rest.Actions;
using OpenHAB.Core.Rest.Addons;
using OpenHAB.Core.Rest.Audio;
using OpenHAB.Core.Rest.Auth;
using OpenHAB.Core.Rest.ChannelTypes;
using OpenHAB.Core.Rest.ConfigDescriptions;
using OpenHAB.Core.Rest.Discovery;
using OpenHAB.Core.Rest.Events;
using OpenHAB.Core.Rest.Habot;
using OpenHAB.Core.Rest.Iconsets;
using OpenHAB.Core.Rest.Inbox;
using OpenHAB.Core.Rest.Items;
using OpenHAB.Core.Rest.Links;
using OpenHAB.Core.Rest.Logging;
using OpenHAB.Core.Rest.Models;
using OpenHAB.Core.Rest.ModuleTypes;
using OpenHAB.Core.Rest.Persistence;
using OpenHAB.Core.Rest.ProfileTypes;
using OpenHAB.Core.Rest.Rules;
using OpenHAB.Core.Rest.Services;
using OpenHAB.Core.Rest.Sitemaps;
using OpenHAB.Core.Rest.Systeminfo;
using OpenHAB.Core.Rest.Tags;
using OpenHAB.Core.Rest.Templates;
using OpenHAB.Core.Rest.ThingTypes;
using OpenHAB.Core.Rest.Things;
using OpenHAB.Core.Rest.Transformations;
using OpenHAB.Core.Rest.Ui;
using OpenHAB.Core.Rest.Uuid;
using OpenHAB.Core.Rest.Voice;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace OpenHAB.Core.Rest {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class OpenHABClient : BaseRequestBuilder {
        /// <summary>The actions property</summary>
        public ActionsRequestBuilder Actions { get =>
            new ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The addons property</summary>
        public AddonsRequestBuilder Addons { get =>
            new AddonsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The audio property</summary>
        public AudioRequestBuilder Audio { get =>
            new AudioRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The auth property</summary>
        public AuthRequestBuilder Auth { get =>
            new AuthRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The channelTypes property</summary>
        public ChannelTypesRequestBuilder ChannelTypes { get =>
            new ChannelTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The configDescriptions property</summary>
        public ConfigDescriptionsRequestBuilder ConfigDescriptions { get =>
            new ConfigDescriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The discovery property</summary>
        public DiscoveryRequestBuilder Discovery { get =>
            new DiscoveryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public EventsRequestBuilder Events { get =>
            new EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The habot property</summary>
        public HabotRequestBuilder Habot { get =>
            new HabotRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The iconsets property</summary>
        public IconsetsRequestBuilder Iconsets { get =>
            new IconsetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The inbox property</summary>
        public InboxRequestBuilder Inbox { get =>
            new InboxRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The items property</summary>
        public ItemsRequestBuilder Items { get =>
            new ItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The links property</summary>
        public LinksRequestBuilder Links { get =>
            new LinksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logging property</summary>
        public LoggingRequestBuilder Logging { get =>
            new LoggingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The moduleTypes property</summary>
        public ModuleTypesRequestBuilder ModuleTypes { get =>
            new ModuleTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The persistence property</summary>
        public PersistenceRequestBuilder Persistence { get =>
            new PersistenceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The profileTypes property</summary>
        public ProfileTypesRequestBuilder ProfileTypes { get =>
            new ProfileTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rules property</summary>
        public RulesRequestBuilder Rules { get =>
            new RulesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The services property</summary>
        public ServicesRequestBuilder Services { get =>
            new ServicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sitemaps property</summary>
        public SitemapsRequestBuilder Sitemaps { get =>
            new SitemapsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The systeminfo property</summary>
        public SysteminfoRequestBuilder Systeminfo { get =>
            new SysteminfoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public TagsRequestBuilder Tags { get =>
            new TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The templates property</summary>
        public TemplatesRequestBuilder Templates { get =>
            new TemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The things property</summary>
        public ThingsRequestBuilder Things { get =>
            new ThingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The thingTypes property</summary>
        public ThingTypesRequestBuilder ThingTypes { get =>
            new ThingTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The transformations property</summary>
        public TransformationsRequestBuilder Transformations { get =>
            new TransformationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ui property</summary>
        public UiRequestBuilder Ui { get =>
            new UiRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The uuid property</summary>
        public UuidRequestBuilder Uuid { get =>
            new UuidRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The voice property</summary>
        public VoiceRequestBuilder Voice { get =>
            new VoiceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="OpenHABClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OpenHABClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>()) {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl)) {
                RequestAdapter.BaseUrl = "https://home.myopenhab.org/rest";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
        /// <summary>
        /// Gets information about the runtime, the API version and links to resources.
        /// </summary>
        /// <returns>A <see cref="RootBean"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<RootBean?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<RootBean> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<RootBean>(requestInfo, RootBean.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets information about the runtime, the API version and links to resources.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class OpenHABClientGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
