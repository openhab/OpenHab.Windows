// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using OpenHAB.Core.Rest.Habot.Notifications.Subscribe;
using OpenHAB.Core.Rest.Habot.Notifications.Vapid;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace OpenHAB.Core.Rest.Habot.Notifications {
    /// <summary>
    /// Builds and executes requests for operations under \habot\notifications
    /// </summary>
    public class NotificationsRequestBuilder : BaseRequestBuilder {
        /// <summary>The subscribe property</summary>
        public SubscribeRequestBuilder Subscribe { get =>
            new SubscribeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The vapid property</summary>
        public VapidRequestBuilder Vapid { get =>
            new VapidRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/habot/notifications", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/habot/notifications", rawUrl) {
        }
    }
}
