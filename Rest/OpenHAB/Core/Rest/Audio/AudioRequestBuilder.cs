// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using OpenHAB.Core.Rest.Audio.Defaultsink;
using OpenHAB.Core.Rest.Audio.Defaultsource;
using OpenHAB.Core.Rest.Audio.Sinks;
using OpenHAB.Core.Rest.Audio.Sources;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace OpenHAB.Core.Rest.Audio {
    /// <summary>
    /// Builds and executes requests for operations under \audio
    /// </summary>
    public class AudioRequestBuilder : BaseRequestBuilder {
        /// <summary>The defaultsink property</summary>
        public DefaultsinkRequestBuilder Defaultsink { get =>
            new DefaultsinkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The defaultsource property</summary>
        public DefaultsourceRequestBuilder Defaultsource { get =>
            new DefaultsourceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sinks property</summary>
        public SinksRequestBuilder Sinks { get =>
            new SinksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sources property</summary>
        public SourcesRequestBuilder Sources { get =>
            new SourcesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="AudioRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AudioRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/audio", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="AudioRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AudioRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/audio", rawUrl) {
        }
    }
}
