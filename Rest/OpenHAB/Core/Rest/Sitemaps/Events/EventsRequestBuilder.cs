// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using OpenHAB.Core.Rest.Sitemaps.Events.Item;
using OpenHAB.Core.Rest.Sitemaps.Events.Subscribe;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace OpenHAB.Core.Rest.Sitemaps.Events {
    /// <summary>
    /// Builds and executes requests for operations under \sitemaps\events
    /// </summary>
    public class EventsRequestBuilder : BaseRequestBuilder {
        /// <summary>The subscribe property</summary>
        public SubscribeRequestBuilder Subscribe { get =>
            new SubscribeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the openHAB.Core.Rest.sitemaps.events.item collection</summary>
        /// <param name="position">subscription id</param>
        /// <returns>A <see cref="WithSubscriptionItemRequestBuilder"/></returns>
        public WithSubscriptionItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("subscriptionid", position);
            return new WithSubscriptionItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new <see cref="EventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EventsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/sitemaps/events", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="EventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EventsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/sitemaps/events", rawUrl) {
        }
    }
}
