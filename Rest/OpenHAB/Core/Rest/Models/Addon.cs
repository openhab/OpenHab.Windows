// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class Addon : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The author property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Author { get; set; }
#nullable restore
#else
        public string Author { get; set; }
#endif
        /// <summary>The backgroundColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackgroundColor { get; set; }
#nullable restore
#else
        public string BackgroundColor { get; set; }
#endif
        /// <summary>The compatible property</summary>
        public bool? Compatible { get; set; }
        /// <summary>The configDescriptionURI property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConfigDescriptionURI { get; set; }
#nullable restore
#else
        public string ConfigDescriptionURI { get; set; }
#endif
        /// <summary>The connection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Connection { get; set; }
#nullable restore
#else
        public string Connection { get; set; }
#endif
        /// <summary>The contentType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentType { get; set; }
#nullable restore
#else
        public string ContentType { get; set; }
#endif
        /// <summary>The countries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Countries { get; set; }
#nullable restore
#else
        public List<string> Countries { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The detailedDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DetailedDescription { get; set; }
#nullable restore
#else
        public string DetailedDescription { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The imageLink property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageLink { get; set; }
#nullable restore
#else
        public string ImageLink { get; set; }
#endif
        /// <summary>The installed property</summary>
        public bool? Installed { get; set; }
        /// <summary>The keywords property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Keywords { get; set; }
#nullable restore
#else
        public string Keywords { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The license property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? License { get; set; }
#nullable restore
#else
        public string License { get; set; }
#endif
        /// <summary>The link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Link { get; set; }
#nullable restore
#else
        public string Link { get; set; }
#endif
        /// <summary>The loggerPackages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? LoggerPackages { get; set; }
#nullable restore
#else
        public List<string> LoggerPackages { get; set; }
#endif
        /// <summary>The maturity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Maturity { get; set; }
#nullable restore
#else
        public string Maturity { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Addon_properties? Properties { get; set; }
#nullable restore
#else
        public Addon_properties Properties { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The uid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uid { get; set; }
#nullable restore
#else
        public string Uid { get; set; }
#endif
        /// <summary>The verifiedAuthor property</summary>
        public bool? VerifiedAuthor { get; set; }
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Addon"/> and sets the default values.
        /// </summary>
        public Addon() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Addon"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Addon CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Addon();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"author", n => { Author = n.GetStringValue(); } },
                {"backgroundColor", n => { BackgroundColor = n.GetStringValue(); } },
                {"compatible", n => { Compatible = n.GetBoolValue(); } },
                {"configDescriptionURI", n => { ConfigDescriptionURI = n.GetStringValue(); } },
                {"connection", n => { Connection = n.GetStringValue(); } },
                {"contentType", n => { ContentType = n.GetStringValue(); } },
                {"countries", n => { Countries = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"detailedDescription", n => { DetailedDescription = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"imageLink", n => { ImageLink = n.GetStringValue(); } },
                {"installed", n => { Installed = n.GetBoolValue(); } },
                {"keywords", n => { Keywords = n.GetStringValue(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"license", n => { License = n.GetStringValue(); } },
                {"link", n => { Link = n.GetStringValue(); } },
                {"loggerPackages", n => { LoggerPackages = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"maturity", n => { Maturity = n.GetStringValue(); } },
                {"properties", n => { Properties = n.GetObjectValue<Addon_properties>(Addon_properties.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"uid", n => { Uid = n.GetStringValue(); } },
                {"verifiedAuthor", n => { VerifiedAuthor = n.GetBoolValue(); } },
                {"version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("author", Author);
            writer.WriteStringValue("backgroundColor", BackgroundColor);
            writer.WriteBoolValue("compatible", Compatible);
            writer.WriteStringValue("configDescriptionURI", ConfigDescriptionURI);
            writer.WriteStringValue("connection", Connection);
            writer.WriteStringValue("contentType", ContentType);
            writer.WriteCollectionOfPrimitiveValues<string>("countries", Countries);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("detailedDescription", DetailedDescription);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("imageLink", ImageLink);
            writer.WriteBoolValue("installed", Installed);
            writer.WriteStringValue("keywords", Keywords);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("license", License);
            writer.WriteStringValue("link", Link);
            writer.WriteCollectionOfPrimitiveValues<string>("loggerPackages", LoggerPackages);
            writer.WriteStringValue("maturity", Maturity);
            writer.WriteObjectValue<Addon_properties>("properties", Properties);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("uid", Uid);
            writer.WriteBoolValue("verifiedAuthor", VerifiedAuthor);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
