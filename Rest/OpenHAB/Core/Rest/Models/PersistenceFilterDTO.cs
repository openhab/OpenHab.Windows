// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class PersistenceFilterDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The inverted property</summary>
        public bool? Inverted { get; set; }
        /// <summary>The lower property</summary>
        public double? Lower { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The relative property</summary>
        public bool? Relative { get; set; }
        /// <summary>The unit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Unit { get; set; }
#nullable restore
#else
        public string Unit { get; set; }
#endif
        /// <summary>The upper property</summary>
        public double? Upper { get; set; }
        /// <summary>The value property</summary>
        public double? Value { get; set; }
        /// <summary>The values property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Values { get; set; }
#nullable restore
#else
        public List<string> Values { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PersistenceFilterDTO"/> and sets the default values.
        /// </summary>
        public PersistenceFilterDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PersistenceFilterDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PersistenceFilterDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PersistenceFilterDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"inverted", n => { Inverted = n.GetBoolValue(); } },
                {"lower", n => { Lower = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"relative", n => { Relative = n.GetBoolValue(); } },
                {"unit", n => { Unit = n.GetStringValue(); } },
                {"upper", n => { Upper = n.GetDoubleValue(); } },
                {"value", n => { Value = n.GetDoubleValue(); } },
                {"values", n => { Values = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("inverted", Inverted);
            writer.WriteDoubleValue("lower", Lower);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("relative", Relative);
            writer.WriteStringValue("unit", Unit);
            writer.WriteDoubleValue("upper", Upper);
            writer.WriteDoubleValue("value", Value);
            writer.WriteCollectionOfPrimitiveValues<string>("values", Values);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
