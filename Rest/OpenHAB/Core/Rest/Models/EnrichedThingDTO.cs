// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class EnrichedThingDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bridgeUID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BridgeUID { get; set; }
#nullable restore
#else
        public string BridgeUID { get; set; }
#endif
        /// <summary>The channels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<EnrichedChannelDTO>? Channels { get; set; }
#nullable restore
#else
        public List<EnrichedChannelDTO> Channels { get; set; }
#endif
        /// <summary>The configuration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EnrichedThingDTO_configuration? Configuration { get; set; }
#nullable restore
#else
        public EnrichedThingDTO_configuration Configuration { get; set; }
#endif
        /// <summary>The editable property</summary>
        public bool? Editable { get; set; }
        /// <summary>The firmwareStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FirmwareStatusDTO? FirmwareStatus { get; set; }
#nullable restore
#else
        public FirmwareStatusDTO FirmwareStatus { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EnrichedThingDTO_properties? Properties { get; set; }
#nullable restore
#else
        public EnrichedThingDTO_properties Properties { get; set; }
#endif
        /// <summary>The statusInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ThingStatusInfo? StatusInfo { get; set; }
#nullable restore
#else
        public ThingStatusInfo StatusInfo { get; set; }
#endif
        /// <summary>The thingTypeUID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThingTypeUID { get; set; }
#nullable restore
#else
        public string ThingTypeUID { get; set; }
#endif
        /// <summary>The UID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UID { get; set; }
#nullable restore
#else
        public string UID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="EnrichedThingDTO"/> and sets the default values.
        /// </summary>
        public EnrichedThingDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EnrichedThingDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EnrichedThingDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EnrichedThingDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"bridgeUID", n => { BridgeUID = n.GetStringValue(); } },
                {"channels", n => { Channels = n.GetCollectionOfObjectValues<EnrichedChannelDTO>(EnrichedChannelDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"configuration", n => { Configuration = n.GetObjectValue<EnrichedThingDTO_configuration>(EnrichedThingDTO_configuration.CreateFromDiscriminatorValue); } },
                {"editable", n => { Editable = n.GetBoolValue(); } },
                {"firmwareStatus", n => { FirmwareStatus = n.GetObjectValue<FirmwareStatusDTO>(FirmwareStatusDTO.CreateFromDiscriminatorValue); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"location", n => { Location = n.GetStringValue(); } },
                {"properties", n => { Properties = n.GetObjectValue<EnrichedThingDTO_properties>(EnrichedThingDTO_properties.CreateFromDiscriminatorValue); } },
                {"statusInfo", n => { StatusInfo = n.GetObjectValue<ThingStatusInfo>(ThingStatusInfo.CreateFromDiscriminatorValue); } },
                {"thingTypeUID", n => { ThingTypeUID = n.GetStringValue(); } },
                {"UID", n => { UID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bridgeUID", BridgeUID);
            writer.WriteCollectionOfObjectValues<EnrichedChannelDTO>("channels", Channels);
            writer.WriteObjectValue<EnrichedThingDTO_configuration>("configuration", Configuration);
            writer.WriteBoolValue("editable", Editable);
            writer.WriteObjectValue<FirmwareStatusDTO>("firmwareStatus", FirmwareStatus);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("location", Location);
            writer.WriteObjectValue<EnrichedThingDTO_properties>("properties", Properties);
            writer.WriteObjectValue<ThingStatusInfo>("statusInfo", StatusInfo);
            writer.WriteStringValue("thingTypeUID", ThingTypeUID);
            writer.WriteStringValue("UID", UID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
