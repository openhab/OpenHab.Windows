// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class RootUIComponent : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The component property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Component { get; set; }
#nullable restore
#else
        public string Component { get; set; }
#endif
        /// <summary>The config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RootUIComponent_config? Config { get; set; }
#nullable restore
#else
        public RootUIComponent_config Config { get; set; }
#endif
        /// <summary>The props property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ConfigDescriptionDTO? Props { get; set; }
#nullable restore
#else
        public ConfigDescriptionDTO Props { get; set; }
#endif
        /// <summary>The slots property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RootUIComponent_slots? Slots { get; set; }
#nullable restore
#else
        public RootUIComponent_slots Slots { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The timestamp property</summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The uid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uid { get; set; }
#nullable restore
#else
        public string Uid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="RootUIComponent"/> and sets the default values.
        /// </summary>
        public RootUIComponent() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RootUIComponent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RootUIComponent CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RootUIComponent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"component", n => { Component = n.GetStringValue(); } },
                {"config", n => { Config = n.GetObjectValue<RootUIComponent_config>(RootUIComponent_config.CreateFromDiscriminatorValue); } },
                {"props", n => { Props = n.GetObjectValue<ConfigDescriptionDTO>(ConfigDescriptionDTO.CreateFromDiscriminatorValue); } },
                {"slots", n => { Slots = n.GetObjectValue<RootUIComponent_slots>(RootUIComponent_slots.CreateFromDiscriminatorValue); } },
                {"tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"uid", n => { Uid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("component", Component);
            writer.WriteObjectValue<RootUIComponent_config>("config", Config);
            writer.WriteObjectValue<ConfigDescriptionDTO>("props", Props);
            writer.WriteObjectValue<RootUIComponent_slots>("slots", Slots);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteDateTimeOffsetValue("timestamp", Timestamp);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("uid", Uid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
