// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class StateDescription : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The maximum property</summary>
        public double? Maximum { get; set; }
        /// <summary>The minimum property</summary>
        public double? Minimum { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<StateOption>? Options { get; set; }
#nullable restore
#else
        public List<StateOption> Options { get; set; }
#endif
        /// <summary>The pattern property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pattern { get; set; }
#nullable restore
#else
        public string Pattern { get; set; }
#endif
        /// <summary>The readOnly property</summary>
        public bool? ReadOnly { get; set; }
        /// <summary>The step property</summary>
        public double? Step { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="StateDescription"/> and sets the default values.
        /// </summary>
        public StateDescription() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="StateDescription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static StateDescription CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new StateDescription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"maximum", n => { Maximum = n.GetDoubleValue(); } },
                {"minimum", n => { Minimum = n.GetDoubleValue(); } },
                {"options", n => { Options = n.GetCollectionOfObjectValues<StateOption>(StateOption.CreateFromDiscriminatorValue)?.ToList(); } },
                {"pattern", n => { Pattern = n.GetStringValue(); } },
                {"readOnly", n => { ReadOnly = n.GetBoolValue(); } },
                {"step", n => { Step = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("maximum", Maximum);
            writer.WriteDoubleValue("minimum", Minimum);
            writer.WriteCollectionOfObjectValues<StateOption>("options", Options);
            writer.WriteStringValue("pattern", Pattern);
            writer.WriteBoolValue("readOnly", ReadOnly);
            writer.WriteDoubleValue("step", Step);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
