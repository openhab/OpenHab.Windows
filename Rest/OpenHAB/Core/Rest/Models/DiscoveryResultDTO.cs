// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class DiscoveryResultDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bridgeUID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BridgeUID { get; set; }
#nullable restore
#else
        public string BridgeUID { get; set; }
#endif
        /// <summary>The flag property</summary>
        public DiscoveryResultDTO_flag? Flag { get; set; }
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DiscoveryResultDTO_properties? Properties { get; set; }
#nullable restore
#else
        public DiscoveryResultDTO_properties Properties { get; set; }
#endif
        /// <summary>The representationProperty property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepresentationProperty { get; set; }
#nullable restore
#else
        public string RepresentationProperty { get; set; }
#endif
        /// <summary>The thingTypeUID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThingTypeUID { get; set; }
#nullable restore
#else
        public string ThingTypeUID { get; set; }
#endif
        /// <summary>The thingUID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThingUID { get; set; }
#nullable restore
#else
        public string ThingUID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="DiscoveryResultDTO"/> and sets the default values.
        /// </summary>
        public DiscoveryResultDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DiscoveryResultDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DiscoveryResultDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DiscoveryResultDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"bridgeUID", n => { BridgeUID = n.GetStringValue(); } },
                {"flag", n => { Flag = n.GetEnumValue<DiscoveryResultDTO_flag>(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"properties", n => { Properties = n.GetObjectValue<DiscoveryResultDTO_properties>(DiscoveryResultDTO_properties.CreateFromDiscriminatorValue); } },
                {"representationProperty", n => { RepresentationProperty = n.GetStringValue(); } },
                {"thingTypeUID", n => { ThingTypeUID = n.GetStringValue(); } },
                {"thingUID", n => { ThingUID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bridgeUID", BridgeUID);
            writer.WriteEnumValue<DiscoveryResultDTO_flag>("flag", Flag);
            writer.WriteStringValue("label", Label);
            writer.WriteObjectValue<DiscoveryResultDTO_properties>("properties", Properties);
            writer.WriteStringValue("representationProperty", RepresentationProperty);
            writer.WriteStringValue("thingTypeUID", ThingTypeUID);
            writer.WriteStringValue("thingUID", ThingUID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
