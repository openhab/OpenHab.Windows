// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class PersistenceServiceConfigurationDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The configs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PersistenceItemConfigurationDTO>? Configs { get; set; }
#nullable restore
#else
        public List<PersistenceItemConfigurationDTO> Configs { get; set; }
#endif
        /// <summary>The cronStrategies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PersistenceCronStrategyDTO>? CronStrategies { get; set; }
#nullable restore
#else
        public List<PersistenceCronStrategyDTO> CronStrategies { get; set; }
#endif
        /// <summary>The defaults property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Defaults { get; set; }
#nullable restore
#else
        public List<string> Defaults { get; set; }
#endif
        /// <summary>The editable property</summary>
        public bool? Editable { get; set; }
        /// <summary>The equalsFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PersistenceFilterDTO>? EqualsFilters { get; set; }
#nullable restore
#else
        public List<PersistenceFilterDTO> EqualsFilters { get; set; }
#endif
        /// <summary>The includeFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PersistenceFilterDTO>? IncludeFilters { get; set; }
#nullable restore
#else
        public List<PersistenceFilterDTO> IncludeFilters { get; set; }
#endif
        /// <summary>The serviceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServiceId { get; set; }
#nullable restore
#else
        public string ServiceId { get; set; }
#endif
        /// <summary>The thresholdFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PersistenceFilterDTO>? ThresholdFilters { get; set; }
#nullable restore
#else
        public List<PersistenceFilterDTO> ThresholdFilters { get; set; }
#endif
        /// <summary>The timeFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PersistenceFilterDTO>? TimeFilters { get; set; }
#nullable restore
#else
        public List<PersistenceFilterDTO> TimeFilters { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PersistenceServiceConfigurationDTO"/> and sets the default values.
        /// </summary>
        public PersistenceServiceConfigurationDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PersistenceServiceConfigurationDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PersistenceServiceConfigurationDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PersistenceServiceConfigurationDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"configs", n => { Configs = n.GetCollectionOfObjectValues<PersistenceItemConfigurationDTO>(PersistenceItemConfigurationDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"cronStrategies", n => { CronStrategies = n.GetCollectionOfObjectValues<PersistenceCronStrategyDTO>(PersistenceCronStrategyDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"defaults", n => { Defaults = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"editable", n => { Editable = n.GetBoolValue(); } },
                {"equalsFilters", n => { EqualsFilters = n.GetCollectionOfObjectValues<PersistenceFilterDTO>(PersistenceFilterDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"includeFilters", n => { IncludeFilters = n.GetCollectionOfObjectValues<PersistenceFilterDTO>(PersistenceFilterDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"serviceId", n => { ServiceId = n.GetStringValue(); } },
                {"thresholdFilters", n => { ThresholdFilters = n.GetCollectionOfObjectValues<PersistenceFilterDTO>(PersistenceFilterDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"timeFilters", n => { TimeFilters = n.GetCollectionOfObjectValues<PersistenceFilterDTO>(PersistenceFilterDTO.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<PersistenceItemConfigurationDTO>("configs", Configs);
            writer.WriteCollectionOfObjectValues<PersistenceCronStrategyDTO>("cronStrategies", CronStrategies);
            writer.WriteCollectionOfPrimitiveValues<string>("defaults", Defaults);
            writer.WriteBoolValue("editable", Editable);
            writer.WriteCollectionOfObjectValues<PersistenceFilterDTO>("equalsFilters", EqualsFilters);
            writer.WriteCollectionOfObjectValues<PersistenceFilterDTO>("includeFilters", IncludeFilters);
            writer.WriteStringValue("serviceId", ServiceId);
            writer.WriteCollectionOfObjectValues<PersistenceFilterDTO>("thresholdFilters", ThresholdFilters);
            writer.WriteCollectionOfObjectValues<PersistenceFilterDTO>("timeFilters", TimeFilters);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
