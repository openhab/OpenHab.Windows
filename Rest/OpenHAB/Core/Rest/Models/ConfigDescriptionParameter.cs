// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class ConfigDescriptionParameter : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The advanced property</summary>
        public bool? Advanced { get; set; }
        /// <summary>The context property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Context { get; set; }
#nullable restore
#else
        public string Context { get; set; }
#endif
        /// <summary>The default property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Default { get; set; }
#nullable restore
#else
        public string Default { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The filterCriteria property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<OpenHAB.Core.Rest.Models.FilterCriteria>? FilterCriteria { get; set; }
#nullable restore
#else
        public List<OpenHAB.Core.Rest.Models.FilterCriteria> FilterCriteria { get; set; }
#endif
        /// <summary>The groupName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupName { get; set; }
#nullable restore
#else
        public string GroupName { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The limitToOptions property</summary>
        public bool? LimitToOptions { get; set; }
        /// <summary>The maximum property</summary>
        public double? Maximum { get; set; }
        /// <summary>The minimum property</summary>
        public double? Minimum { get; set; }
        /// <summary>The multiple property</summary>
        public bool? Multiple { get; set; }
        /// <summary>The multipleLimit property</summary>
        public int? MultipleLimit { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ParameterOption>? Options { get; set; }
#nullable restore
#else
        public List<ParameterOption> Options { get; set; }
#endif
        /// <summary>The pattern property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pattern { get; set; }
#nullable restore
#else
        public string Pattern { get; set; }
#endif
        /// <summary>The readOnly property</summary>
        public bool? ReadOnly { get; set; }
        /// <summary>The required property</summary>
        public bool? Required { get; set; }
        /// <summary>The stepSize property</summary>
        public double? StepSize { get; set; }
        /// <summary>The type property</summary>
        public ConfigDescriptionParameter_type? Type { get; set; }
        /// <summary>The unit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Unit { get; set; }
#nullable restore
#else
        public string Unit { get; set; }
#endif
        /// <summary>The unitLabel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitLabel { get; set; }
#nullable restore
#else
        public string UnitLabel { get; set; }
#endif
        /// <summary>The verifyable property</summary>
        public bool? Verifyable { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ConfigDescriptionParameter"/> and sets the default values.
        /// </summary>
        public ConfigDescriptionParameter() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ConfigDescriptionParameter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ConfigDescriptionParameter CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ConfigDescriptionParameter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"advanced", n => { Advanced = n.GetBoolValue(); } },
                {"context", n => { Context = n.GetStringValue(); } },
                {"default", n => { Default = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"filterCriteria", n => { FilterCriteria = n.GetCollectionOfObjectValues<OpenHAB.Core.Rest.Models.FilterCriteria>(OpenHAB.Core.Rest.Models.FilterCriteria.CreateFromDiscriminatorValue)?.ToList(); } },
                {"groupName", n => { GroupName = n.GetStringValue(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"limitToOptions", n => { LimitToOptions = n.GetBoolValue(); } },
                {"maximum", n => { Maximum = n.GetDoubleValue(); } },
                {"minimum", n => { Minimum = n.GetDoubleValue(); } },
                {"multiple", n => { Multiple = n.GetBoolValue(); } },
                {"multipleLimit", n => { MultipleLimit = n.GetIntValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"options", n => { Options = n.GetCollectionOfObjectValues<ParameterOption>(ParameterOption.CreateFromDiscriminatorValue)?.ToList(); } },
                {"pattern", n => { Pattern = n.GetStringValue(); } },
                {"readOnly", n => { ReadOnly = n.GetBoolValue(); } },
                {"required", n => { Required = n.GetBoolValue(); } },
                {"stepSize", n => { StepSize = n.GetDoubleValue(); } },
                {"type", n => { Type = n.GetEnumValue<ConfigDescriptionParameter_type>(); } },
                {"unit", n => { Unit = n.GetStringValue(); } },
                {"unitLabel", n => { UnitLabel = n.GetStringValue(); } },
                {"verifyable", n => { Verifyable = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("advanced", Advanced);
            writer.WriteStringValue("context", Context);
            writer.WriteStringValue("default", Default);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<OpenHAB.Core.Rest.Models.FilterCriteria>("filterCriteria", FilterCriteria);
            writer.WriteStringValue("groupName", GroupName);
            writer.WriteStringValue("label", Label);
            writer.WriteBoolValue("limitToOptions", LimitToOptions);
            writer.WriteDoubleValue("maximum", Maximum);
            writer.WriteDoubleValue("minimum", Minimum);
            writer.WriteBoolValue("multiple", Multiple);
            writer.WriteIntValue("multipleLimit", MultipleLimit);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<ParameterOption>("options", Options);
            writer.WriteStringValue("pattern", Pattern);
            writer.WriteBoolValue("readOnly", ReadOnly);
            writer.WriteBoolValue("required", Required);
            writer.WriteDoubleValue("stepSize", StepSize);
            writer.WriteEnumValue<ConfigDescriptionParameter_type>("type", Type);
            writer.WriteStringValue("unit", Unit);
            writer.WriteStringValue("unitLabel", UnitLabel);
            writer.WriteBoolValue("verifyable", Verifyable);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
