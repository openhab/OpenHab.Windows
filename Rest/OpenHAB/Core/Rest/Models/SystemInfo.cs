// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class SystemInfo : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The availableProcessors property</summary>
        public int? AvailableProcessors { get; set; }
        /// <summary>The configFolder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConfigFolder { get; set; }
#nullable restore
#else
        public string ConfigFolder { get; set; }
#endif
        /// <summary>The freeMemory property</summary>
        public long? FreeMemory { get; set; }
        /// <summary>The javaVendor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JavaVendor { get; set; }
#nullable restore
#else
        public string JavaVendor { get; set; }
#endif
        /// <summary>The javaVendorVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JavaVendorVersion { get; set; }
#nullable restore
#else
        public string JavaVendorVersion { get; set; }
#endif
        /// <summary>The javaVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JavaVersion { get; set; }
#nullable restore
#else
        public string JavaVersion { get; set; }
#endif
        /// <summary>The logFolder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogFolder { get; set; }
#nullable restore
#else
        public string LogFolder { get; set; }
#endif
        /// <summary>The osArchitecture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsArchitecture { get; set; }
#nullable restore
#else
        public string OsArchitecture { get; set; }
#endif
        /// <summary>The osName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsName { get; set; }
#nullable restore
#else
        public string OsName { get; set; }
#endif
        /// <summary>The osVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsVersion { get; set; }
#nullable restore
#else
        public string OsVersion { get; set; }
#endif
        /// <summary>The startLevel property</summary>
        public int? StartLevel { get; set; }
        /// <summary>The totalMemory property</summary>
        public long? TotalMemory { get; set; }
        /// <summary>The uptime property</summary>
        public long? Uptime { get; set; }
        /// <summary>The userdataFolder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserdataFolder { get; set; }
#nullable restore
#else
        public string UserdataFolder { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="SystemInfo"/> and sets the default values.
        /// </summary>
        public SystemInfo() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SystemInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SystemInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SystemInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"availableProcessors", n => { AvailableProcessors = n.GetIntValue(); } },
                {"configFolder", n => { ConfigFolder = n.GetStringValue(); } },
                {"freeMemory", n => { FreeMemory = n.GetLongValue(); } },
                {"javaVendor", n => { JavaVendor = n.GetStringValue(); } },
                {"javaVendorVersion", n => { JavaVendorVersion = n.GetStringValue(); } },
                {"javaVersion", n => { JavaVersion = n.GetStringValue(); } },
                {"logFolder", n => { LogFolder = n.GetStringValue(); } },
                {"osArchitecture", n => { OsArchitecture = n.GetStringValue(); } },
                {"osName", n => { OsName = n.GetStringValue(); } },
                {"osVersion", n => { OsVersion = n.GetStringValue(); } },
                {"startLevel", n => { StartLevel = n.GetIntValue(); } },
                {"totalMemory", n => { TotalMemory = n.GetLongValue(); } },
                {"uptime", n => { Uptime = n.GetLongValue(); } },
                {"userdataFolder", n => { UserdataFolder = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("availableProcessors", AvailableProcessors);
            writer.WriteStringValue("configFolder", ConfigFolder);
            writer.WriteLongValue("freeMemory", FreeMemory);
            writer.WriteStringValue("javaVendor", JavaVendor);
            writer.WriteStringValue("javaVendorVersion", JavaVendorVersion);
            writer.WriteStringValue("javaVersion", JavaVersion);
            writer.WriteStringValue("logFolder", LogFolder);
            writer.WriteStringValue("osArchitecture", OsArchitecture);
            writer.WriteStringValue("osName", OsName);
            writer.WriteStringValue("osVersion", OsVersion);
            writer.WriteIntValue("startLevel", StartLevel);
            writer.WriteLongValue("totalMemory", TotalMemory);
            writer.WriteLongValue("uptime", Uptime);
            writer.WriteStringValue("userdataFolder", UserdataFolder);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
