// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class EnrichedItemDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The commandDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenHAB.Core.Rest.Models.CommandDescription? CommandDescription { get; set; }
#nullable restore
#else
        public OpenHAB.Core.Rest.Models.CommandDescription CommandDescription { get; set; }
#endif
        /// <summary>The editable property</summary>
        public bool? Editable { get; set; }
        /// <summary>The groupNames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? GroupNames { get; set; }
#nullable restore
#else
        public List<string> GroupNames { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Link { get; set; }
#nullable restore
#else
        public string Link { get; set; }
#endif
        /// <summary>The metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EnrichedItemDTO_metadata? Metadata { get; set; }
#nullable restore
#else
        public EnrichedItemDTO_metadata Metadata { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The stateDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenHAB.Core.Rest.Models.StateDescription? StateDescription { get; set; }
#nullable restore
#else
        public OpenHAB.Core.Rest.Models.StateDescription StateDescription { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The transformedState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransformedState { get; set; }
#nullable restore
#else
        public string TransformedState { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The unitSymbol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitSymbol { get; set; }
#nullable restore
#else
        public string UnitSymbol { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="EnrichedItemDTO"/> and sets the default values.
        /// </summary>
        public EnrichedItemDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EnrichedItemDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EnrichedItemDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EnrichedItemDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"category", n => { Category = n.GetStringValue(); } },
                {"commandDescription", n => { CommandDescription = n.GetObjectValue<OpenHAB.Core.Rest.Models.CommandDescription>(OpenHAB.Core.Rest.Models.CommandDescription.CreateFromDiscriminatorValue); } },
                {"editable", n => { Editable = n.GetBoolValue(); } },
                {"groupNames", n => { GroupNames = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"link", n => { Link = n.GetStringValue(); } },
                {"metadata", n => { Metadata = n.GetObjectValue<EnrichedItemDTO_metadata>(EnrichedItemDTO_metadata.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"state", n => { State = n.GetStringValue(); } },
                {"stateDescription", n => { StateDescription = n.GetObjectValue<OpenHAB.Core.Rest.Models.StateDescription>(OpenHAB.Core.Rest.Models.StateDescription.CreateFromDiscriminatorValue); } },
                {"tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"transformedState", n => { TransformedState = n.GetStringValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"unitSymbol", n => { UnitSymbol = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("category", Category);
            writer.WriteObjectValue<OpenHAB.Core.Rest.Models.CommandDescription>("commandDescription", CommandDescription);
            writer.WriteBoolValue("editable", Editable);
            writer.WriteCollectionOfPrimitiveValues<string>("groupNames", GroupNames);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("link", Link);
            writer.WriteObjectValue<EnrichedItemDTO_metadata>("metadata", Metadata);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("state", State);
            writer.WriteObjectValue<OpenHAB.Core.Rest.Models.StateDescription>("stateDescription", StateDescription);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("transformedState", TransformedState);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("unitSymbol", UnitSymbol);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
