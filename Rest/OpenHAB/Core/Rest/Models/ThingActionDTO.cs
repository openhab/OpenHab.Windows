// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class ThingActionDTO : IAdditionalDataHolder, IParsable {
        /// <summary>The actionUid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActionUid { get; set; }
#nullable restore
#else
        public string ActionUid { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The inputs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Input>? Inputs { get; set; }
#nullable restore
#else
        public List<Input> Inputs { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The outputs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Output>? Outputs { get; set; }
#nullable restore
#else
        public List<Output> Outputs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ThingActionDTO"/> and sets the default values.
        /// </summary>
        public ThingActionDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ThingActionDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ThingActionDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ThingActionDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"actionUid", n => { ActionUid = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"inputs", n => { Inputs = n.GetCollectionOfObjectValues<Input>(Input.CreateFromDiscriminatorValue)?.ToList(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"outputs", n => { Outputs = n.GetCollectionOfObjectValues<Output>(Output.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("actionUid", ActionUid);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<Input>("inputs", Inputs);
            writer.WriteStringValue("label", Label);
            writer.WriteCollectionOfObjectValues<Output>("outputs", Outputs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
