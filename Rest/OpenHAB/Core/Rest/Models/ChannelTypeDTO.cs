// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class ChannelTypeDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The advanced property</summary>
        public bool? Advanced { get; set; }
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The commandDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenHAB.Core.Rest.Models.CommandDescription? CommandDescription { get; set; }
#nullable restore
#else
        public OpenHAB.Core.Rest.Models.CommandDescription CommandDescription { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The itemType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemType { get; set; }
#nullable restore
#else
        public string ItemType { get; set; }
#endif
        /// <summary>The kind property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kind { get; set; }
#nullable restore
#else
        public string Kind { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The parameterGroups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ConfigDescriptionParameterGroupDTO>? ParameterGroups { get; set; }
#nullable restore
#else
        public List<ConfigDescriptionParameterGroupDTO> ParameterGroups { get; set; }
#endif
        /// <summary>The parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ConfigDescriptionParameterDTO>? Parameters { get; set; }
#nullable restore
#else
        public List<ConfigDescriptionParameterDTO> Parameters { get; set; }
#endif
        /// <summary>The stateDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenHAB.Core.Rest.Models.StateDescription? StateDescription { get; set; }
#nullable restore
#else
        public OpenHAB.Core.Rest.Models.StateDescription StateDescription { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The UID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UID { get; set; }
#nullable restore
#else
        public string UID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ChannelTypeDTO"/> and sets the default values.
        /// </summary>
        public ChannelTypeDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ChannelTypeDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ChannelTypeDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ChannelTypeDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"advanced", n => { Advanced = n.GetBoolValue(); } },
                {"category", n => { Category = n.GetStringValue(); } },
                {"commandDescription", n => { CommandDescription = n.GetObjectValue<OpenHAB.Core.Rest.Models.CommandDescription>(OpenHAB.Core.Rest.Models.CommandDescription.CreateFromDiscriminatorValue); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"itemType", n => { ItemType = n.GetStringValue(); } },
                {"kind", n => { Kind = n.GetStringValue(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"parameterGroups", n => { ParameterGroups = n.GetCollectionOfObjectValues<ConfigDescriptionParameterGroupDTO>(ConfigDescriptionParameterGroupDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"parameters", n => { Parameters = n.GetCollectionOfObjectValues<ConfigDescriptionParameterDTO>(ConfigDescriptionParameterDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"stateDescription", n => { StateDescription = n.GetObjectValue<OpenHAB.Core.Rest.Models.StateDescription>(OpenHAB.Core.Rest.Models.StateDescription.CreateFromDiscriminatorValue); } },
                {"tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"UID", n => { UID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("advanced", Advanced);
            writer.WriteStringValue("category", Category);
            writer.WriteObjectValue<OpenHAB.Core.Rest.Models.CommandDescription>("commandDescription", CommandDescription);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("itemType", ItemType);
            writer.WriteStringValue("kind", Kind);
            writer.WriteStringValue("label", Label);
            writer.WriteCollectionOfObjectValues<ConfigDescriptionParameterGroupDTO>("parameterGroups", ParameterGroups);
            writer.WriteCollectionOfObjectValues<ConfigDescriptionParameterDTO>("parameters", Parameters);
            writer.WriteObjectValue<OpenHAB.Core.Rest.Models.StateDescription>("stateDescription", StateDescription);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("UID", UID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
