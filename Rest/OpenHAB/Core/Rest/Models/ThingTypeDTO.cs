// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class ThingTypeDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bridge property</summary>
        public bool? Bridge { get; set; }
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The channelGroups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ChannelGroupDefinitionDTO>? ChannelGroups { get; set; }
#nullable restore
#else
        public List<ChannelGroupDefinitionDTO> ChannelGroups { get; set; }
#endif
        /// <summary>The channels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ChannelDefinitionDTO>? Channels { get; set; }
#nullable restore
#else
        public List<ChannelDefinitionDTO> Channels { get; set; }
#endif
        /// <summary>The configParameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ConfigDescriptionParameterDTO>? ConfigParameters { get; set; }
#nullable restore
#else
        public List<ConfigDescriptionParameterDTO> ConfigParameters { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The extensibleChannelTypeIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ExtensibleChannelTypeIds { get; set; }
#nullable restore
#else
        public List<string> ExtensibleChannelTypeIds { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The listed property</summary>
        public bool? Listed { get; set; }
        /// <summary>The parameterGroups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ConfigDescriptionParameterGroupDTO>? ParameterGroups { get; set; }
#nullable restore
#else
        public List<ConfigDescriptionParameterGroupDTO> ParameterGroups { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ThingTypeDTO_properties? Properties { get; set; }
#nullable restore
#else
        public ThingTypeDTO_properties Properties { get; set; }
#endif
        /// <summary>The supportedBridgeTypeUIDs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedBridgeTypeUIDs { get; set; }
#nullable restore
#else
        public List<string> SupportedBridgeTypeUIDs { get; set; }
#endif
        /// <summary>The UID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UID { get; set; }
#nullable restore
#else
        public string UID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ThingTypeDTO"/> and sets the default values.
        /// </summary>
        public ThingTypeDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ThingTypeDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ThingTypeDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ThingTypeDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"bridge", n => { Bridge = n.GetBoolValue(); } },
                {"category", n => { Category = n.GetStringValue(); } },
                {"channelGroups", n => { ChannelGroups = n.GetCollectionOfObjectValues<ChannelGroupDefinitionDTO>(ChannelGroupDefinitionDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"channels", n => { Channels = n.GetCollectionOfObjectValues<ChannelDefinitionDTO>(ChannelDefinitionDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"configParameters", n => { ConfigParameters = n.GetCollectionOfObjectValues<ConfigDescriptionParameterDTO>(ConfigDescriptionParameterDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"extensibleChannelTypeIds", n => { ExtensibleChannelTypeIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"listed", n => { Listed = n.GetBoolValue(); } },
                {"parameterGroups", n => { ParameterGroups = n.GetCollectionOfObjectValues<ConfigDescriptionParameterGroupDTO>(ConfigDescriptionParameterGroupDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"properties", n => { Properties = n.GetObjectValue<ThingTypeDTO_properties>(ThingTypeDTO_properties.CreateFromDiscriminatorValue); } },
                {"supportedBridgeTypeUIDs", n => { SupportedBridgeTypeUIDs = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"UID", n => { UID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("bridge", Bridge);
            writer.WriteStringValue("category", Category);
            writer.WriteCollectionOfObjectValues<ChannelGroupDefinitionDTO>("channelGroups", ChannelGroups);
            writer.WriteCollectionOfObjectValues<ChannelDefinitionDTO>("channels", Channels);
            writer.WriteCollectionOfObjectValues<ConfigDescriptionParameterDTO>("configParameters", ConfigParameters);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<string>("extensibleChannelTypeIds", ExtensibleChannelTypeIds);
            writer.WriteStringValue("label", Label);
            writer.WriteBoolValue("listed", Listed);
            writer.WriteCollectionOfObjectValues<ConfigDescriptionParameterGroupDTO>("parameterGroups", ParameterGroups);
            writer.WriteObjectValue<ThingTypeDTO_properties>("properties", Properties);
            writer.WriteCollectionOfPrimitiveValues<string>("supportedBridgeTypeUIDs", SupportedBridgeTypeUIDs);
            writer.WriteStringValue("UID", UID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
