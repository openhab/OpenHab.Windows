// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class RuleDTO : IAdditionalDataHolder, IParsable {
        /// <summary>The actions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ActionDTO>? Actions { get; set; }
#nullable restore
#else
        public List<ActionDTO> Actions { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The conditions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ConditionDTO>? Conditions { get; set; }
#nullable restore
#else
        public List<ConditionDTO> Conditions { get; set; }
#endif
        /// <summary>The configDescriptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ConfigDescriptionParameterDTO>? ConfigDescriptions { get; set; }
#nullable restore
#else
        public List<ConfigDescriptionParameterDTO> ConfigDescriptions { get; set; }
#endif
        /// <summary>The configuration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RuleDTO_configuration? Configuration { get; set; }
#nullable restore
#else
        public RuleDTO_configuration Configuration { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The templateUID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TemplateUID { get; set; }
#nullable restore
#else
        public string TemplateUID { get; set; }
#endif
        /// <summary>The triggers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TriggerDTO>? Triggers { get; set; }
#nullable restore
#else
        public List<TriggerDTO> Triggers { get; set; }
#endif
        /// <summary>The uid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uid { get; set; }
#nullable restore
#else
        public string Uid { get; set; }
#endif
        /// <summary>The visibility property</summary>
        public RuleDTO_visibility? Visibility { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="RuleDTO"/> and sets the default values.
        /// </summary>
        public RuleDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RuleDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RuleDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RuleDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"actions", n => { Actions = n.GetCollectionOfObjectValues<ActionDTO>(ActionDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"conditions", n => { Conditions = n.GetCollectionOfObjectValues<ConditionDTO>(ConditionDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"configDescriptions", n => { ConfigDescriptions = n.GetCollectionOfObjectValues<ConfigDescriptionParameterDTO>(ConfigDescriptionParameterDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"configuration", n => { Configuration = n.GetObjectValue<RuleDTO_configuration>(RuleDTO_configuration.CreateFromDiscriminatorValue); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"templateUID", n => { TemplateUID = n.GetStringValue(); } },
                {"triggers", n => { Triggers = n.GetCollectionOfObjectValues<TriggerDTO>(TriggerDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"uid", n => { Uid = n.GetStringValue(); } },
                {"visibility", n => { Visibility = n.GetEnumValue<RuleDTO_visibility>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ActionDTO>("actions", Actions);
            writer.WriteCollectionOfObjectValues<ConditionDTO>("conditions", Conditions);
            writer.WriteCollectionOfObjectValues<ConfigDescriptionParameterDTO>("configDescriptions", ConfigDescriptions);
            writer.WriteObjectValue<RuleDTO_configuration>("configuration", Configuration);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("templateUID", TemplateUID);
            writer.WriteCollectionOfObjectValues<TriggerDTO>("triggers", Triggers);
            writer.WriteStringValue("uid", Uid);
            writer.WriteEnumValue<RuleDTO_visibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
