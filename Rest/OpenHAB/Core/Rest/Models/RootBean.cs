// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class RootBean : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The links property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<OpenHAB.Core.Rest.Models.Links>? Links { get; set; }
#nullable restore
#else
        public List<OpenHAB.Core.Rest.Models.Links> Links { get; set; }
#endif
        /// <summary>The locale property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Locale { get; set; }
#nullable restore
#else
        public string Locale { get; set; }
#endif
        /// <summary>The measurementSystem property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeasurementSystem { get; set; }
#nullable restore
#else
        public string MeasurementSystem { get; set; }
#endif
        /// <summary>The runtimeInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenHAB.Core.Rest.Models.RuntimeInfo? RuntimeInfo { get; set; }
#nullable restore
#else
        public OpenHAB.Core.Rest.Models.RuntimeInfo RuntimeInfo { get; set; }
#endif
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="RootBean"/> and sets the default values.
        /// </summary>
        public RootBean() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RootBean"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RootBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RootBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"links", n => { Links = n.GetCollectionOfObjectValues<OpenHAB.Core.Rest.Models.Links>(OpenHAB.Core.Rest.Models.Links.CreateFromDiscriminatorValue)?.ToList(); } },
                {"locale", n => { Locale = n.GetStringValue(); } },
                {"measurementSystem", n => { MeasurementSystem = n.GetStringValue(); } },
                {"runtimeInfo", n => { RuntimeInfo = n.GetObjectValue<OpenHAB.Core.Rest.Models.RuntimeInfo>(OpenHAB.Core.Rest.Models.RuntimeInfo.CreateFromDiscriminatorValue); } },
                {"version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<OpenHAB.Core.Rest.Models.Links>("links", Links);
            writer.WriteStringValue("locale", Locale);
            writer.WriteStringValue("measurementSystem", MeasurementSystem);
            writer.WriteObjectValue<OpenHAB.Core.Rest.Models.RuntimeInfo>("runtimeInfo", RuntimeInfo);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
