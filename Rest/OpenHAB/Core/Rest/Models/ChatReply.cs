// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class ChatReply : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The answer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Answer { get; set; }
#nullable restore
#else
        public string Answer { get; set; }
#endif
        /// <summary>The card property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenHAB.Core.Rest.Models.Card? Card { get; set; }
#nullable restore
#else
        public OpenHAB.Core.Rest.Models.Card Card { get; set; }
#endif
        /// <summary>The hint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hint { get; set; }
#nullable restore
#else
        public string Hint { get; set; }
#endif
        /// <summary>The intent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenHAB.Core.Rest.Models.Intent? Intent { get; set; }
#nullable restore
#else
        public OpenHAB.Core.Rest.Models.Intent Intent { get; set; }
#endif
        /// <summary>The language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>The matchedItemNames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MatchedItemNames { get; set; }
#nullable restore
#else
        public List<string> MatchedItemNames { get; set; }
#endif
        /// <summary>The matchedItems property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MatchedItems { get; set; }
#nullable restore
#else
        public List<string> MatchedItems { get; set; }
#endif
        /// <summary>The query property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Query { get; set; }
#nullable restore
#else
        public string Query { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ChatReply"/> and sets the default values.
        /// </summary>
        public ChatReply() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ChatReply"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ChatReply CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ChatReply();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"answer", n => { Answer = n.GetStringValue(); } },
                {"card", n => { Card = n.GetObjectValue<OpenHAB.Core.Rest.Models.Card>(OpenHAB.Core.Rest.Models.Card.CreateFromDiscriminatorValue); } },
                {"hint", n => { Hint = n.GetStringValue(); } },
                {"intent", n => { Intent = n.GetObjectValue<OpenHAB.Core.Rest.Models.Intent>(OpenHAB.Core.Rest.Models.Intent.CreateFromDiscriminatorValue); } },
                {"language", n => { Language = n.GetStringValue(); } },
                {"matchedItemNames", n => { MatchedItemNames = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"matchedItems", n => { MatchedItems = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"query", n => { Query = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("answer", Answer);
            writer.WriteObjectValue<OpenHAB.Core.Rest.Models.Card>("card", Card);
            writer.WriteStringValue("hint", Hint);
            writer.WriteObjectValue<OpenHAB.Core.Rest.Models.Intent>("intent", Intent);
            writer.WriteStringValue("language", Language);
            writer.WriteCollectionOfPrimitiveValues<string>("matchedItemNames", MatchedItemNames);
            writer.WriteCollectionOfPrimitiveValues<string>("matchedItems", MatchedItems);
            writer.WriteStringValue("query", Query);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
