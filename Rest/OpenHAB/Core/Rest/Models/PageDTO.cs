// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class PageDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The icon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Icon { get; set; }
#nullable restore
#else
        public string Icon { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The leaf property</summary>
        public bool? Leaf { get; set; }
        /// <summary>The link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Link { get; set; }
#nullable restore
#else
        public string Link { get; set; }
#endif
        /// <summary>The parent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PageDTO? Parent { get; set; }
#nullable restore
#else
        public PageDTO Parent { get; set; }
#endif
        /// <summary>The timeout property</summary>
        public bool? Timeout { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The widgets property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WidgetDTO>? Widgets { get; set; }
#nullable restore
#else
        public List<WidgetDTO> Widgets { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PageDTO"/> and sets the default values.
        /// </summary>
        public PageDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PageDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PageDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PageDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"icon", n => { Icon = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"leaf", n => { Leaf = n.GetBoolValue(); } },
                {"link", n => { Link = n.GetStringValue(); } },
                {"parent", n => { Parent = n.GetObjectValue<PageDTO>(PageDTO.CreateFromDiscriminatorValue); } },
                {"timeout", n => { Timeout = n.GetBoolValue(); } },
                {"title", n => { Title = n.GetStringValue(); } },
                {"widgets", n => { Widgets = n.GetCollectionOfObjectValues<WidgetDTO>(WidgetDTO.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("icon", Icon);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("leaf", Leaf);
            writer.WriteStringValue("link", Link);
            writer.WriteObjectValue<PageDTO>("parent", Parent);
            writer.WriteBoolValue("timeout", Timeout);
            writer.WriteStringValue("title", Title);
            writer.WriteCollectionOfObjectValues<WidgetDTO>("widgets", Widgets);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
