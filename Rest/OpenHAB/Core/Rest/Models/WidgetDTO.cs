// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenHAB.Core.Rest.Models {
    public class WidgetDTO : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The encoding property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Encoding { get; set; }
#nullable restore
#else
        public string Encoding { get; set; }
#endif
        /// <summary>The forceAsItem property</summary>
        public bool? ForceAsItem { get; set; }
        /// <summary>The height property</summary>
        public int? Height { get; set; }
        /// <summary>The icon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Icon { get; set; }
#nullable restore
#else
        public string Icon { get; set; }
#endif
        /// <summary>The iconcolor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iconcolor { get; set; }
#nullable restore
#else
        public string Iconcolor { get; set; }
#endif
        /// <summary>The inputHint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InputHint { get; set; }
#nullable restore
#else
        public string InputHint { get; set; }
#endif
        /// <summary>The item property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EnrichedItemDTO? Item { get; set; }
#nullable restore
#else
        public EnrichedItemDTO Item { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The labelcolor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Labelcolor { get; set; }
#nullable restore
#else
        public string Labelcolor { get; set; }
#endif
        /// <summary>The labelSource property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LabelSource { get; set; }
#nullable restore
#else
        public string LabelSource { get; set; }
#endif
        /// <summary>The legend property</summary>
        public bool? Legend { get; set; }
        /// <summary>The linkedPage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PageDTO? LinkedPage { get; set; }
#nullable restore
#else
        public PageDTO LinkedPage { get; set; }
#endif
        /// <summary>The mappings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MappingDTO>? Mappings { get; set; }
#nullable restore
#else
        public List<MappingDTO> Mappings { get; set; }
#endif
        /// <summary>The maxValue property</summary>
        public double? MaxValue { get; set; }
        /// <summary>The minValue property</summary>
        public double? MinValue { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The pattern property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pattern { get; set; }
#nullable restore
#else
        public string Pattern { get; set; }
#endif
        /// <summary>The period property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Period { get; set; }
#nullable restore
#else
        public string Period { get; set; }
#endif
        /// <summary>The refresh property</summary>
        public int? Refresh { get; set; }
        /// <summary>The sendFrequency property</summary>
        public int? SendFrequency { get; set; }
        /// <summary>The service property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Service { get; set; }
#nullable restore
#else
        public string Service { get; set; }
#endif
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The staticIcon property</summary>
        public bool? StaticIcon { get; set; }
        /// <summary>The step property</summary>
        public double? Step { get; set; }
        /// <summary>The switchSupport property</summary>
        public bool? SwitchSupport { get; set; }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The unit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Unit { get; set; }
#nullable restore
#else
        public string Unit { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The valuecolor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Valuecolor { get; set; }
#nullable restore
#else
        public string Valuecolor { get; set; }
#endif
        /// <summary>The visibility property</summary>
        public bool? Visibility { get; set; }
        /// <summary>The widgetId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WidgetId { get; set; }
#nullable restore
#else
        public string WidgetId { get; set; }
#endif
        /// <summary>The yAxisDecimalPattern property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? YAxisDecimalPattern { get; set; }
#nullable restore
#else
        public string YAxisDecimalPattern { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="WidgetDTO"/> and sets the default values.
        /// </summary>
        public WidgetDTO() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WidgetDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WidgetDTO CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WidgetDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"encoding", n => { Encoding = n.GetStringValue(); } },
                {"forceAsItem", n => { ForceAsItem = n.GetBoolValue(); } },
                {"height", n => { Height = n.GetIntValue(); } },
                {"icon", n => { Icon = n.GetStringValue(); } },
                {"iconcolor", n => { Iconcolor = n.GetStringValue(); } },
                {"inputHint", n => { InputHint = n.GetStringValue(); } },
                {"item", n => { Item = n.GetObjectValue<EnrichedItemDTO>(EnrichedItemDTO.CreateFromDiscriminatorValue); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"labelSource", n => { LabelSource = n.GetStringValue(); } },
                {"labelcolor", n => { Labelcolor = n.GetStringValue(); } },
                {"legend", n => { Legend = n.GetBoolValue(); } },
                {"linkedPage", n => { LinkedPage = n.GetObjectValue<PageDTO>(PageDTO.CreateFromDiscriminatorValue); } },
                {"mappings", n => { Mappings = n.GetCollectionOfObjectValues<MappingDTO>(MappingDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"maxValue", n => { MaxValue = n.GetDoubleValue(); } },
                {"minValue", n => { MinValue = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"pattern", n => { Pattern = n.GetStringValue(); } },
                {"period", n => { Period = n.GetStringValue(); } },
                {"refresh", n => { Refresh = n.GetIntValue(); } },
                {"sendFrequency", n => { SendFrequency = n.GetIntValue(); } },
                {"service", n => { Service = n.GetStringValue(); } },
                {"state", n => { State = n.GetStringValue(); } },
                {"staticIcon", n => { StaticIcon = n.GetBoolValue(); } },
                {"step", n => { Step = n.GetDoubleValue(); } },
                {"switchSupport", n => { SwitchSupport = n.GetBoolValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"unit", n => { Unit = n.GetStringValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
                {"valuecolor", n => { Valuecolor = n.GetStringValue(); } },
                {"visibility", n => { Visibility = n.GetBoolValue(); } },
                {"widgetId", n => { WidgetId = n.GetStringValue(); } },
                {"yAxisDecimalPattern", n => { YAxisDecimalPattern = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("encoding", Encoding);
            writer.WriteBoolValue("forceAsItem", ForceAsItem);
            writer.WriteIntValue("height", Height);
            writer.WriteStringValue("icon", Icon);
            writer.WriteStringValue("iconcolor", Iconcolor);
            writer.WriteStringValue("inputHint", InputHint);
            writer.WriteObjectValue<EnrichedItemDTO>("item", Item);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("labelcolor", Labelcolor);
            writer.WriteStringValue("labelSource", LabelSource);
            writer.WriteBoolValue("legend", Legend);
            writer.WriteObjectValue<PageDTO>("linkedPage", LinkedPage);
            writer.WriteCollectionOfObjectValues<MappingDTO>("mappings", Mappings);
            writer.WriteDoubleValue("maxValue", MaxValue);
            writer.WriteDoubleValue("minValue", MinValue);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("pattern", Pattern);
            writer.WriteStringValue("period", Period);
            writer.WriteIntValue("refresh", Refresh);
            writer.WriteIntValue("sendFrequency", SendFrequency);
            writer.WriteStringValue("service", Service);
            writer.WriteStringValue("state", State);
            writer.WriteBoolValue("staticIcon", StaticIcon);
            writer.WriteDoubleValue("step", Step);
            writer.WriteBoolValue("switchSupport", SwitchSupport);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("unit", Unit);
            writer.WriteStringValue("url", Url);
            writer.WriteStringValue("valuecolor", Valuecolor);
            writer.WriteBoolValue("visibility", Visibility);
            writer.WriteStringValue("widgetId", WidgetId);
            writer.WriteStringValue("yAxisDecimalPattern", YAxisDecimalPattern);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
